# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pythonnator', [dirname(__file__)])
        except ImportError:
            import _pythonnator
            return _pythonnator
        if fp is not None:
            try:
                _mod = imp.load_module('_pythonnator', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pythonnator = swig_import_helper()
    del swig_import_helper
else:
    import _pythonnator
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Type, name)
    __repr__ = _swig_repr
    def getName(self): return _pythonnator.Type_getName(self)
    def isValid(self): return _pythonnator.Type_isValid(self)
    def getFeatureByBaseName(self, *args): return _pythonnator.Type_getFeatureByBaseName(self, *args)
    def getAppropriateFeatures(self): return _pythonnator.Type_getAppropriateFeatures(self)
    def __init__(self): 
        this = _pythonnator.new_Type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pythonnator.delete_Type
    __del__ = lambda self : None;
Type_swigregister = _pythonnator.Type_swigregister
Type_swigregister(Type)

class Feature(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Feature, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Feature, name)
    __repr__ = _swig_repr
    def isValid(self): return _pythonnator.Feature_isValid(self)
    def getName(self): return _pythonnator.Feature_getName(self)
    def getRangeType(self): return _pythonnator.Feature_getRangeType(self)
    def getIntroType(self): return _pythonnator.Feature_getIntroType(self)
    def __init__(self): 
        this = _pythonnator.new_Feature()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pythonnator.delete_Feature
    __del__ = lambda self : None;
Feature_swigregister = _pythonnator.Feature_swigregister
Feature_swigregister(Feature)

class TypeSystem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypeSystem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TypeSystem, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getType(self, *args): return _pythonnator.TypeSystem_getType(self, *args)
TypeSystem_swigregister = _pythonnator.TypeSystem_swigregister
TypeSystem_swigregister(TypeSystem)

class CAS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CAS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CAS, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self): return _pythonnator.CAS_iterator(self)
    def getIndexRepository(self): return _pythonnator.CAS_getIndexRepository(self)
    def createFS(self, *args): return _pythonnator.CAS_createFS(self, *args)
    def getTypeSystem(self): return _pythonnator.CAS_getTypeSystem(self)
    def getAnnotationIndex(self, *args): return _pythonnator.CAS_getAnnotationIndex(self, *args)
    def setDocumentText(self, *args): return _pythonnator.CAS_setDocumentText(self, *args)
    def getDocumentText(self): return _pythonnator.CAS_getDocumentText(self)
    def setSofaDataString(self, *args): return _pythonnator.CAS_setSofaDataString(self, *args)
    def setSofaDataArray(self, *args): return _pythonnator.CAS_setSofaDataArray(self, *args)
    def setSofaDataURI(self, *args): return _pythonnator.CAS_setSofaDataURI(self, *args)
    def getSofaDataURI(self): return _pythonnator.CAS_getSofaDataURI(self)
    def createAnnotation(self, *args): return _pythonnator.CAS_createAnnotation(self, *args)
    def getView(self, *args): return _pythonnator.CAS_getView(self, *args)
    def createView(self, *args): return _pythonnator.CAS_createView(self, *args)
    def getSofa(self, *args): return _pythonnator.CAS_getSofa(self, *args)
CAS_swigregister = _pythonnator.CAS_swigregister
CAS_swigregister(CAS)

class FeatureStructure(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FeatureStructure, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FeatureStructure, name)
    __repr__ = _swig_repr
    def getCAS(self): return _pythonnator.FeatureStructure_getCAS(self)
    def isValid(self): return _pythonnator.FeatureStructure_isValid(self)
    def getType(self): return _pythonnator.FeatureStructure_getType(self)
    def clone(self, *args): return _pythonnator.FeatureStructure_clone(self, *args)
    def isUntouchedFSValue(self, *args): return _pythonnator.FeatureStructure_isUntouchedFSValue(self, *args)
    def getFSValue(self, *args): return _pythonnator.FeatureStructure_getFSValue(self, *args)
    def setFSValue(self, *args): return _pythonnator.FeatureStructure_setFSValue(self, *args)
    def getIntValue(self, *args): return _pythonnator.FeatureStructure_getIntValue(self, *args)
    def setIntValue(self, *args): return _pythonnator.FeatureStructure_setIntValue(self, *args)
    def getFloatValue(self, *args): return _pythonnator.FeatureStructure_getFloatValue(self, *args)
    def setFloatValue(self, *args): return _pythonnator.FeatureStructure_setFloatValue(self, *args)
    def getStringValue(self, *args): return _pythonnator.FeatureStructure_getStringValue(self, *args)
    def setStringValue(self, *args): return _pythonnator.FeatureStructure_setStringValue(self, *args)
    def __init__(self): 
        this = _pythonnator.new_FeatureStructure()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pythonnator.delete_FeatureStructure
    __del__ = lambda self : None;
FeatureStructure_swigregister = _pythonnator.FeatureStructure_swigregister
FeatureStructure_swigregister(FeatureStructure)

class AnnotationFS(FeatureStructure):
    __swig_setmethods__ = {}
    for _s in [FeatureStructure]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnnotationFS, name, value)
    __swig_getmethods__ = {}
    for _s in [FeatureStructure]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnnotationFS, name)
    __repr__ = _swig_repr
    def getBeginPosition(self): return _pythonnator.AnnotationFS_getBeginPosition(self)
    def getEndPosition(self): return _pythonnator.AnnotationFS_getEndPosition(self)
    def getLength(self): return _pythonnator.AnnotationFS_getLength(self)
    def getCoveredText(self): return _pythonnator.AnnotationFS_getCoveredText(self)
    def __init__(self): 
        this = _pythonnator.new_AnnotationFS()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pythonnator.delete_AnnotationFS
    __del__ = lambda self : None;
AnnotationFS_swigregister = _pythonnator.AnnotationFS_swigregister
AnnotationFS_swigregister(AnnotationFS)

class SofaFS(FeatureStructure):
    __swig_setmethods__ = {}
    for _s in [FeatureStructure]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SofaFS, name, value)
    __swig_getmethods__ = {}
    for _s in [FeatureStructure]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SofaFS, name)
    __repr__ = _swig_repr
    def getSofaURI(self): return _pythonnator.SofaFS_getSofaURI(self)
    def getSofaMime(self): return _pythonnator.SofaFS_getSofaMime(self)
    def __init__(self): 
        this = _pythonnator.new_SofaFS()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pythonnator.delete_SofaFS
    __del__ = lambda self : None;
SofaFS_swigregister = _pythonnator.SofaFS_swigregister
SofaFS_swigregister(SofaFS)

class FSIndexRepository(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FSIndexRepository, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FSIndexRepository, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getIndex(self, *args): return _pythonnator.FSIndexRepository_getIndex(self, *args)
    def getIndexByType(self, *args): return _pythonnator.FSIndexRepository_getIndexByType(self, *args)
    def addFS(self, *args): return _pythonnator.FSIndexRepository_addFS(self, *args)
FSIndexRepository_swigregister = _pythonnator.FSIndexRepository_swigregister
FSIndexRepository_swigregister(FSIndexRepository)

class FSIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FSIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FSIterator, name)
    __repr__ = _swig_repr
    def isValid(self): return _pythonnator.FSIterator_isValid(self)
    def get(self): return _pythonnator.FSIterator_get(self)
    def moveToNext(self): return _pythonnator.FSIterator_moveToNext(self)
    def moveToPrevious(self): return _pythonnator.FSIterator_moveToPrevious(self)
    def moveToFirst(self): return _pythonnator.FSIterator_moveToFirst(self)
    def moveToLast(self): return _pythonnator.FSIterator_moveToLast(self)
    def moveTo(self, *args): return _pythonnator.FSIterator_moveTo(self, *args)
    def peekNext(self): return _pythonnator.FSIterator_peekNext(self)
    def peekPrevious(self): return _pythonnator.FSIterator_peekPrevious(self)
    def __init__(self): 
        this = _pythonnator.new_FSIterator()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pythonnator.delete_FSIterator
    __del__ = lambda self : None;
FSIterator_swigregister = _pythonnator.FSIterator_swigregister
FSIterator_swigregister(FSIterator)

class ANIterator(FSIterator):
    __swig_setmethods__ = {}
    for _s in [FSIterator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ANIterator, name, value)
    __swig_getmethods__ = {}
    for _s in [FSIterator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ANIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def get(self): return _pythonnator.ANIterator_get(self)
ANIterator_swigregister = _pythonnator.ANIterator_swigregister
ANIterator_swigregister(ANIterator)

class ResultSpecification(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResultSpecification, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResultSpecification, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
ResultSpecification_swigregister = _pythonnator.ResultSpecification_swigregister
ResultSpecification_swigregister(ResultSpecification)

class AnnotatorContext(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnnotatorContext, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnnotatorContext, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def extractValue(self, *args): return _pythonnator.AnnotatorContext_extractValue(self, *args)
    def extractStringValue(self, *args): return _pythonnator.AnnotatorContext_extractStringValue(self, *args)
    def extractIntegerValue(self, *args): return _pythonnator.AnnotatorContext_extractIntegerValue(self, *args)
    def extractFloatValue(self, *args): return _pythonnator.AnnotatorContext_extractFloatValue(self, *args)
    def logMessage(self, *args): return _pythonnator.AnnotatorContext_logMessage(self, *args)
    def logWarning(self, *args): return _pythonnator.AnnotatorContext_logWarning(self, *args)
    def logError(self, *args): return _pythonnator.AnnotatorContext_logError(self, *args)
AnnotatorContext_swigregister = _pythonnator.AnnotatorContext_swigregister
AnnotatorContext_swigregister(AnnotatorContext)

class FSIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FSIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FSIndex, name)
    __repr__ = _swig_repr
    def isValid(self): return _pythonnator.FSIndex_isValid(self)
    def getSize(self): return _pythonnator.FSIndex_getSize(self)
    def find(self, *args): return _pythonnator.FSIndex_find(self, *args)
    def iterator(self): return _pythonnator.FSIndex_iterator(self)
    def __init__(self): 
        this = _pythonnator.new_FSIndex()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pythonnator.delete_FSIndex
    __del__ = lambda self : None;
FSIndex_swigregister = _pythonnator.FSIndex_swigregister
FSIndex_swigregister(FSIndex)

class ANIndex(FSIndex):
    __swig_setmethods__ = {}
    for _s in [FSIndex]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ANIndex, name, value)
    __swig_getmethods__ = {}
    for _s in [FSIndex]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ANIndex, name)
    __repr__ = _swig_repr
    def iterator(self): return _pythonnator.ANIndex_iterator(self)
    def __init__(self): 
        this = _pythonnator.new_ANIndex()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pythonnator.delete_ANIndex
    __del__ = lambda self : None;
ANIndex_swigregister = _pythonnator.ANIndex_swigregister
ANIndex_swigregister(ANIndex)



